---
apiVersion: v1
kind: Template
metadata:
  labels:
    app: enmasse
  name: enmasse-base
objects:
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: queue
      app: enmasse
    name: queue-inmemory
  objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: ${ADDRESS}
        app: enmasse
        multicast: 'false'
        store_and_forward: 'true'
        type: address-config
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        address: ${ADDRESS}
        role: broker
      template:
        metadata:
          labels:
            address: ${ADDRESS}
            app: enmasse
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: ${ADDRESS}
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            - containerPort: 8161
              name: jolokia
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:latest
        type: ImageChange
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: queue
      app: enmasse
    name: queue-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${STORAGE_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: ${ADDRESS}
        app: enmasse
        multicast: 'false'
        store_and_forward: 'true'
        type: address-config
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        address: ${ADDRESS}
        role: broker
      template:
        metadata:
          labels:
            address: ${ADDRESS}
            app: enmasse
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: ${ADDRESS}
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            - containerPort: 8161
              name: jolokia
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:latest
        type: ImageChange
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: topic
      app: enmasse
    name: topic-inmemory
  objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: ${ADDRESS}
        app: enmasse
        multicast: 'true'
        store_and_forward: 'true'
        type: address-config
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        address: ${ADDRESS}
        role: broker
      template:
        metadata:
          labels:
            address: ${ADDRESS}
            app: enmasse
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            - containerPort: 8161
              name: jolokia
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: ${ROUTER_LINK_CAPACITY}
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: topic-forwarder
            livenessProbe:
              httpGet:
                path: /health
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:latest
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:latest
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - forwarder
          from:
            kind: ImageStreamTag
            name: topic-forwarder:latest
        type: ImageChange
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: topic
      app: enmasse
    name: topic-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${STORAGE_CAPACITY}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: ${ADDRESS}
        app: enmasse
        multicast: 'true'
        store_and_forward: 'true'
        type: address-config
      name: ${NAME}
    spec:
      replicas: 1
      selector:
        address: ${ADDRESS}
        role: broker
      template:
        metadata:
          labels:
            address: ${ADDRESS}
            app: enmasse
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - /opt/artemis-shutdown-hook/bin/artemis-shutdown-hook
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            - containerPort: 8161
              name: jolokia
            volumeMounts:
            - mountPath: /var/run/artemis
              name: vol-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: ${ROUTER_LINK_CAPACITY}
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
          - env:
            - name: TOPIC_NAME
              value: ${ADDRESS}
            image: topic-forwarder
            livenessProbe:
              httpGet:
                path: /health
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:latest
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:latest
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - forwarder
          from:
            kind: ImageStreamTag
            name: topic-forwarder:latest
        type: ImageChange
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: direct
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        address: ${ADDRESS}
        app: enmasse
        multicast: ${MULTICAST}
        store_and_forward: 'false'
        type: address-config
      name: ${NAME}
  parameters:
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the address
    name: ADDRESS
    required: true
  - description: If the address should have multicast semantics or not
    name: MULTICAST
    required: true
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: enmasse
    name: restapi
  spec:
    host: ${RESTAPI_HOSTNAME}
    port:
      targetPort: http
    to:
      kind: Service
      name: restapi
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: router
  spec:
    dockerImageRepository: ${ROUTER_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${ROUTER_REPO}:latest
      name: latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: enmasse
      name: qdrouterd
    name: qdrouterd
  spec:
    replicas: 1
    selector:
      name: qdrouterd
    template:
      metadata:
        labels:
          app: enmasse
          capability: router
          name: qdrouterd
      spec:
        containers:
        - env:
          - name: LINK_CAPACITY
            value: ${ROUTER_LINK_CAPACITY}
          image: router
          livenessProbe:
            tcpSocket:
              port: amqp
          name: router
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 55673
            name: internal
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - router
        from:
          kind: ImageStreamTag
          name: router:latest
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: artemis
  spec:
    dockerImageRepository: ${BROKER_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${BROKER_REPO}:latest
      name: latest
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: topic-forwarder
  spec:
    dockerImageRepository: ${TOPIC_FORWARDER_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${TOPIC_FORWARDER_REPO}:latest
      name: latest
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"configuration","namespace":"","kind":"Service"},{"name":"ragent","namespace":"","kind":"Service"},{"name":"subscription","namespace":"","kind":"Service"},{"name":"restapi","namespace":"","kind":"Service"},{"name":"storage-controller","namespace":"","kind":"Service"},{"name":"mqtt-frontend","namespace":"","kind":"Service"}]'
      service.alpha.openshift.io/infrastructure: 'true'
    labels:
      app: enmasse
    name: messaging
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: internal
      port: 55673
      protocol: TCP
      targetPort: 55673
    selector:
      capability: router
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: configserv
  spec:
    dockerImageRepository: ${CONFIGSERV_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${CONFIGSERV_REPO}:latest
      name: latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: enmasse
      name: configserv
    name: configserv
  spec:
    replicas: 1
    selector:
      name: configserv
    template:
      metadata:
        labels:
          app: enmasse
          name: configserv
      spec:
        containers:
        - image: configserv
          livenessProbe:
            tcpSocket:
              port: amqp
          name: bridge
          ports:
          - containerPort: 5672
            name: amqp
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - bridge
        from:
          kind: ImageStreamTag
          name: configserv:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: configuration
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      name: configserv
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: ragent
  spec:
    dockerImageRepository: ${RAGENT_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${RAGENT_REPO}:latest
      name: latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: enmasse
      name: ragent
    name: ragent
  spec:
    replicas: 1
    selector:
      name: ragent
    template:
      metadata:
        labels:
          app: enmasse
          name: ragent
      spec:
        containers:
        - image: ragent
          livenessProbe:
            tcpSocket:
              port: amqp
          name: ragent
          ports:
          - containerPort: 55672
            name: amqp
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ragent
        from:
          kind: ImageStreamTag
          name: ragent:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: ragent
  spec:
    ports:
    - name: amqp
      port: 55672
      protocol: TCP
      targetPort: 55672
    selector:
      name: ragent
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: subserv
  spec:
    dockerImageRepository: ${SUBSERV_REPO}
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: ${SUBSERV_REPO}:latest
      name: latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: enmasse
      name: subserv
    name: subserv
  spec:
    replicas: 1
    selector:
      name: subserv
    template:
      metadata:
        labels:
          app: enmasse
          name: subserv
      spec:
        containers:
        - image: subserv
          livenessProbe:
            tcpSocket:
              port: amqp
          name: subserv
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - subserv
        from:
          kind: ImageStreamTag
          name: subserv:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: subscription
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      name: subserv
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: enmasse
    name: mqtt-frontend
  spec:
    dockerImageRepository: "${MQTT_FRONTEND_REPO}"
    importPolicy:
      scheduled: true
    tags:
    - from:
        kind: DockerImage
        name: "${MQTT_FRONTEND_REPO}:latest"
      name: latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: enmasse
      name: mqtt-frontend
    name: mqtt-frontend
  spec:
    replicas: 1
    selector:
      name: mqtt-frontend
    template:
      metadata:
        labels:
          app: enmasse
          name: mqtt-frontend
      spec:
        containers:
        - image: mqtt-frontend
          livenessProbe:
            tcpSocket:
              port: mqtt
          name: mqtt-frontend
          ports:
          - containerPort: 1883
            name: mqtt
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - mqtt-frontend
        from:
          kind: ImageStreamTag
          name: mqtt-frontend:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: mqtt-frontend
  spec:
    ports:
    - name: mqtt
      port: 1883
      protocol: TCP
      targetPort: 1883
    selector:
      name: mqtt-frontend
parameters:
- description: The image to use for the router
  name: ROUTER_REPO
  value: enmasseproject/qdrouterd
- description: The default image to use as broker
  name: BROKER_REPO
  value: enmasseproject/artemis
- description: The default image to use as topic forwarder
  name: TOPIC_FORWARDER_REPO
  value: enmasseproject/topic-forwarder
- description: The link capacity setting for router
  name: ROUTER_LINK_CAPACITY
  value: '50'
- description: The image to use for the configuration service
  name: CONFIGSERV_REPO
  value: enmasseproject/configserv
- description: The docker image to use for the storage controller
  name: STORAGE_CONTROLLER_REPO
  value: enmasseproject/storage-controller
- description: The image to use for the router agent
  name: RAGENT_REPO
  value: enmasseproject/ragent
- description: The image to use for the subscription services
  name: SUBSERV_REPO
  value: enmasseproject/subserv
- description: The image to use for the rest api
  name: RESTAPI_REPO
  value: enmasseproject/enmasse-rest
- description: The hostname to use for the exposed route for messaging (TLS only)
  name: MESSAGING_HOSTNAME
- description: The hostname to use for the exposed route for the REST API
  name: RESTAPI_HOSTNAME
- description: The image to use for the MQTT frontend
  name: MQTT_FRONTEND_REPO
  value: enmasseproject/mqtt-frontend
